{"version":3,"sources":["DropZone.js","LayerBar.js","utils/APIConnection.js","Sidebar.js","Map.js","App.js","utils/RandomColor.js","index.js"],"names":["baseStyle","flex","display","flexDirection","alignItems","padding","paddingLeft","paddingRight","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","outline","justifyContent","fontSize","activeStyle","acceptStyle","rejectStyle","Dropzone","addLayersToState","layers","onDrop","useCallback","acceptedFiles","promises","file","filePromise","Promise","resolve","fr","FileReader","readAsText","onload","JSON","parse","result","push","all","then","files","useDropzone","accept","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","style","useMemo","LayerBar","removeLayerFromState","selectedLayersIndices","handleSelectedChange","handleMetaChange","console","log","map","layer","key","id","className","indexOf","ListItem","disableGutters","onClick","name","visibility","VisibilityOutlined","VisibilityOffOutlined","CreateOutlined","DeleteOutline","HOST","concatGeoJSON","list","features","forEach","feature","type","calculateBuffer","inputData","requestData","axios","post","response","data","catch","error","calculateUnion","calculateIntersection","HeadLine","children","Operation","Sidebar","removeLayersFromState","selectedLayers","filter","List","disablePadding","DropZone","mapboxgl","accessToken","Map","useState","setMap","mapContainer","useRef","addLayer","addSource","source","layout","paint","removeLayer","layerID","removeSource","getCurrentLayerIDs","getStyle","updateVisibility","getLayoutProperty","setLayoutProperty","useEffect","initial_map","container","current","center","zoom","draw","MapboxDraw","displayControlsDefault","controls","point","line_string","polygon","addControl","on","e","getAll","deleteAll","resize","f","queryRenderedFeatures","length","initializeMap","currentLayers","removable","addable","handleLayerUpdate","ref","el","App","props","setLayers","setSelectedLayersIndices","selectedLayersRef","newValues","operation","newValue","Math","random","toString","slice","i","floor","getRandomColor","selected","indice","newLayers","newSelectedIndices","layerId","change","prevLayers","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e7925924.chunk.js","sourcesContent":["import React, { useCallback, useMemo } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport PublishIconLarge from \"@material-ui/icons/Publish\";\n\nconst baseStyle = {\n  flex: 1,\n  display: \"flex\",\n  flexDirection: \"row\",\n  alignItems: \"center\",\n  padding: \"20px\",\n  paddingLeft: \"20px\",\n  paddingRight: \"20px\",\n  borderWidth: 2,\n  borderRadius: 4,\n  borderColor: \"black\",\n  borderStyle: \"solid\",\n  backgroundColor: \"#e7e7e7\",\n  color: \"black\",\n  outline: \"none\",\n  justifyContent: \"space-around\",\n  //transition: \"border .24s ease-in-out\",\n  fontSize: \"18px\",\n};\n\nconst activeStyle = {\n  backgroundColor: \"#3a3a3a\",\n  color: \"white\",\n};\n\nconst acceptStyle = {\n  borderColor: \"white\",\n};\n\nconst rejectStyle = {\n  borderColor: \"white\",\n  borderStyle: \"solid\"\n};\n\nfunction Dropzone({ addLayersToState, layers }) {\n  const onDrop = useCallback(\n    (acceptedFiles) => {\n      let promises = [];\n      for (let file of acceptedFiles) {\n        let filePromise = new Promise((resolve) => {\n          let fr = new FileReader();\n          fr.readAsText(file);\n          fr.onload = () => resolve(JSON.parse(fr.result));\n        });\n        promises.push(filePromise);\n      }\n\n      Promise.all(promises).then((files) => {\n        addLayersToState(files, \"upload\");\n      });\n    },\n    //eslint-disable-next-line\n    [layers]\n  );\n\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject,\n  } = useDropzone({ accept: \".json\", onDrop });\n\n  const style = useMemo(\n    () => ({\n      ...baseStyle,\n      ...(isDragActive ? activeStyle : {}),\n      ...(isDragAccept ? acceptStyle : {}),\n      ...(isDragReject ? rejectStyle : {}),\n    }),\n    [isDragActive, isDragReject, isDragAccept]\n  );\n\n  return (\n    <div {...getRootProps({ style })}>\n      <input {...getInputProps()} />\n      <text>Upload Layers</text>\n      <PublishIconLarge />\n    </div>\n  );\n}\n\nexport default Dropzone;\n","import { ListItem } from \"@material-ui/core\";\nimport React from \"react\";\nimport { DeleteOutline, CreateOutlined, VisibilityOutlined, VisibilityOffOutlined } from \"@material-ui/icons\";\n\nconst LayerBar = ({\n  layers,\n  removeLayerFromState,\n  selectedLayersIndices,\n  handleSelectedChange,\n  handleMetaChange\n}) => {\n  console.log(selectedLayersIndices);\n  return (\n    <div>\n      {layers &&\n        layers.map((layer) => {\n          return (\n            <div\n              key={layer.id}\n              className={\n                selectedLayersIndices.indexOf(layer.id) === -1\n                  ? \"layer-item\"\n                  : \"layer-item-selected\"\n              }\n            >\n              <ListItem disableGutters\n                onClick={() => {\n                  handleSelectedChange(layer.id);\n                }}\n              >\n                {layer.name}\n              </ListItem>\n              {layer.visibility !== 'none' ? \n              <VisibilityOutlined onClick={() => handleMetaChange(layer.id, 'none')}/>\n              : <VisibilityOffOutlined onClick={() => handleMetaChange(layer.id, 'visible')}></VisibilityOffOutlined>}\n              <CreateOutlined />\n              <DeleteOutline onClick={() => removeLayerFromState(layer.id)} />\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default LayerBar;\n","import axios from \"axios\";\n\n\n//const HOST = \"http://10.53.26.143:5000\"\nconst HOST = \"https://tba4251-api.herokuapp.com/\"\n\nfunction concatGeoJSON(list) {\n  // used to combine features into one geojson for backend processing\n  let features = [];\n\n  list.forEach((feature) => {\n    features = [...feature.features, ...features];\n  });\n\n  let newGeoJSON = {\n    type: \"FeatureCollection\",\n    features: features,\n  };\n\n  return newGeoJSON;\n}\n\nexport function calculateBuffer(addLayersToState, inputData) {\n  let requestData = concatGeoJSON(inputData);\n  requestData[\"value\"] = 10;\n\n  return function () {\n    axios\n      .post(HOST + \"/api/buffer\", requestData)\n      .then((response) => {\n        addLayersToState([response.data], \"buffer\");\n      })\n      .catch(function (error) {\n        // manipulate the error response here\n      });\n  };\n}\n\nexport function calculateUnion(addLayersToState, inputData) {\n  return function () {\n    let requestData = concatGeoJSON(inputData);\n    axios\n      .post(HOST + \"/api/union\", requestData)\n      .then((response) => {\n        addLayersToState([response.data], \"union\");\n      })\n      .catch(function (error) {\n        // manipulate the error response here\n      });\n  };\n}\n\nexport function calculateIntersection(addLayersToState, inputData) {\n  return function () {\n    let requestData = concatGeoJSON(inputData);\n    axios\n      .post(HOST + \"/api/intersection\", requestData)\n      .then((response) => {\n        addLayersToState([response.data], \"intersection\");\n      })\n      .catch(function (error) {\n        // manipulate the error response here\n      });\n  };\n}\n","import React from \"react\";\nimport DropZone from \"./DropZone\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport LayerBar from \"./LayerBar\";\nimport LayersIcon from \"@material-ui/icons/Layers\";\nimport FunctionsIcon from \"@material-ui/icons/Functions\";\nimport ArrowForward from \"@material-ui/icons/ArrowForwardIosOutlined\";\nimport ClearOutlinedIcon from \"@material-ui/icons/ClearOutlined\";\n\nimport {\n  calculateBuffer,\n  calculateUnion,\n  calculateIntersection,\n} from \"./utils/APIConnection\";\n\nexport const HeadLine = ({ children }) => {\n  return <div className=\"headLine\">{children}</div>;\n};\n\nexport const Operation = ({ children }) => {\n  return <div className=\"operation\">{children}</div>;\n};\n\nconst Sidebar = ({\n  addLayersToState,\n  removeLayersFromState,\n  removeLayerFromState,\n  layers,\n  selectedLayersIndices,\n  handleSelectedChange,\n  handleMetaChange,\n}) => {\n\n  var selectedLayers = layers.filter(\n    (layer) => selectedLayersIndices.indexOf(layer.id) !== -1\n  ); // match selected indices with layers stored in state\n\n  return (\n    <div className=\"sidebar\">\n      <List disablePadding>\n        <HeadLine>\n          <ListItem disableGutters>Operations</ListItem>\n          <FunctionsIcon />\n        </HeadLine>\n\n        <Operation>\n          <ListItem\n            disableGutters\n            onClick={calculateBuffer(addLayersToState, selectedLayers)}\n          >\n            Buffer\n          </ListItem>\n          <ArrowForward />\n        </Operation>\n        <Operation>\n          <ListItem\n            disableGutters\n            onClick={calculateUnion(addLayersToState, selectedLayers)}\n          >\n            Union\n          </ListItem>\n          <ArrowForward />\n        </Operation>\n        <Operation>\n          <ListItem\n            disableGutters\n            onClick={calculateIntersection(addLayersToState, selectedLayers)}\n          >\n            Intersection\n          </ListItem>\n          <ArrowForward />\n        </Operation>\n        <Operation>\n          <ListItem disableGutters onClick={removeLayersFromState}>\n            Remove layers\n          </ListItem>\n          <ClearOutlinedIcon />\n        </Operation>\n        <ListItem disableGutters>\n          <DropZone\n            accept=\"*.json\"\n            addLayersToState={addLayersToState}\n            layers={layers}\n          />\n        </ListItem>\n        <HeadLine>\n          <ListItem disableGutters>Layers</ListItem>\n          <LayersIcon />\n        </HeadLine>\n        <LayerBar\n          selectedLayersIndices={selectedLayersIndices}\n          layers={layers}\n          removeLayerFromState={removeLayerFromState}\n          handleSelectedChange={handleSelectedChange}\n          handleMetaChange={handleMetaChange}\n        />\n      </List>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport MapboxDraw from \"@mapbox/mapbox-gl-draw\";\nimport \"@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css\";\n\nmapboxgl.accessToken =\n  \"pk.eyJ1IjoidG9yc3RlaW4iLCJhIjoiY2s3YWJkdzk3MDU1bjNncnd0dWExN292YiJ9.te0K0gwI11dUd2qZs6FQ0g\";\n\nconst Map = ({ layers, handleSelectedChange, addLayersToState }) => {\n  // react hooks for storing the map\n  const [map, setMap] = useState(null);\n  const mapContainer = useRef(null);\n\n  // initial coordinates for Trondheim\n  const lng = 10.38;\n  const lat = 63.43;\n  const zoom = 13;\n\n  const initializeMap = (setMap, mapContainer) => {\n    const initial_map = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: \"mapbox://styles/mapbox/streets-v11\", // stylesheet location\n      center: [lng, lat],\n      zoom: zoom,\n    });\n\n    var draw = new MapboxDraw({\n      displayControlsDefault: false,\n      controls: {\n        point: true,\n        line_string: true,\n        polygon: true\n      },\n    });\n\n    initial_map.addControl(draw, \"top-right\");\n\n    initial_map.on(\"draw.create\", onCreation);\n    //initial_map.on(\"draw.delete\", updateArea);\n    //initial_map.on(\"draw.update\", updateArea);\n\n    function onCreation(e) {\n      var data = draw.getAll();\n      addLayersToState([data], 'drawTool');\n      draw.deleteAll();\n    }\n\n    initial_map.on(\"load\", () => {\n      setMap(initial_map);\n\n      initial_map.resize();\n    });\n\n    initial_map.on(\"click\", (e) => {\n      console.log(e);\n      let f = initial_map.queryRenderedFeatures(e.point, {\n        layers: getCurrentLayerIDs(initial_map),\n      });\n      if (f.length) {\n        // if you have clicked a number of layers\n        handleSelectedChange(f.map((feature) => feature.layer.id)[0]);\n      }\n    });\n  };\n\n  const addLayer = (layers) => {\n    layers.forEach((layer) => {\n      map.addSource(layer.id, {\n        type: \"geojson\",\n        data: layer,\n      });\n      map.addLayer({\n        id: layer.id,\n        type: \"fill\",\n        source: layer.id,\n        layout: {\n          'visibility': 'visible',\n        },\n        paint: {\n          \"fill-color\": layer.color,\n          \"fill-opacity\": 0.7,\n        },\n      });\n    });\n  };\n\n  const removeLayer = (layers) => {\n    layers.forEach((layerID) => {\n      map.removeLayer(layerID);\n      map.removeSource(layerID);\n    });\n  };\n\n  const getCurrentLayerIDs = (map) => {\n    return map\n      .getStyle()\n      .layers.filter((layer) => {\n        return (\n          layer.source !== \"composite\" &&\n          layer.type !== \"background\" &&\n          layer.source !== \"mapbox-gl-draw-cold\" &&\n          layer.source !== \"mapbox-gl-draw-hot\"\n        );\n      })\n      .map((layer) => layer.id);\n  };\n\n  const updateVisibility = (layers) => {\n    layers.forEach(layer => {\n      var visibility = map.getLayoutProperty(layer.id, 'visibility');\n      if (visibility !== layer.visibility) map.setLayoutProperty(layer.id, 'visibility', layer.visibility)\n    })\n  }\n\n  const handleLayerUpdate = (layers, map) => {\n    const currentLayers = getCurrentLayerIDs(map);\n\n    const removable = currentLayers.filter(function (layer) {\n      //get the index for layers that have been deleted in the state\n      return layers.map((layer) => layer.id).indexOf(layer) === -1;\n    });\n\n    const addable = layers.filter(function (layer) {\n      //get the index for layers that have been added to the state\n      return currentLayers.indexOf(layer.id) === -1;\n    });\n\n    if (addable[0]) addLayer(addable);\n    if (removable[0]) removeLayer(removable);\n\n    updateVisibility(layers)\n  };\n\n  // render map on initial load\n  useEffect(() => {\n    if (!map) initializeMap(setMap, mapContainer);\n    // eslint-disable-next-line\n  }, [map]);\n\n  useEffect(() => {\n    console.log(\"Map\", \"Layers handled\");\n    // eslint-disable-next-line\n    if (map) handleLayerUpdate(layers, map);\n    // eslint-disable-next-line\n  }, [layers]);\n\n  return (\n    <div ref={(el) => (mapContainer.current = el)} className=\"mapContainer\" />\n  );\n};\n\nexport default Map;\n","import React, { useState, useRef } from \"react\";\nimport Sidebar from \"./Sidebar\";\nimport Map from \"./Map\";\nimport { getRandomColor } from \"./utils/RandomColor\";\n\nconst App = (props) => {\n  const [layers, setLayers] = useState([]);\n  const [selectedLayersIndices, setSelectedLayersIndices] = useState([]);\n  const selectedLayersRef = useRef(selectedLayersIndices);\n\n  const addLayersToState = (setLayers) => {\n    return (newValues, operation) => {\n      newValues.forEach((newValue) => {\n        newValue[\"id\"] = operation + \"_\" + Math.random().toString(36).slice(2); //generates random name for the layer\n        newValue[\"name\"] =\n          operation + \"_\" + Math.random().toString(36).slice(2);\n        newValue[\"color\"] = getRandomColor(); //generates random color\n      });\n      setLayers((layers) => [...layers, ...newValues]);\n    };\n  };\n\n  const handleSelectedChange = () => {\n    return (selected) => {\n      console.log(selected);\n      if (selectedLayersRef.current.indexOf(selected) === -1) {\n        selectedLayersRef.current = [...selectedLayersRef.current, selected];\n        console.log(selectedLayersRef.current);\n        setSelectedLayersIndices(selectedLayersRef.current); // if not selected, add to state\n      } else {\n        selectedLayersRef.current = selectedLayersRef.current.filter(\n          (indice) => {\n            // if selected, filter out of state\n            return indice !== selected;\n          }\n        );\n        setSelectedLayersIndices(selectedLayersRef.current);\n      }\n    };\n  };\n\n  const handleMetaChange = (setLayers) => {\n    return(layerId, change) => {\n      setLayers((prevLayers) => prevLayers.map(layer => layer.id === layerId ? { ...layer, visibility: change }: layer))\n    }\n  };\n\n  const removeLayersFromState = (setLayers) => {\n    return () => {\n      setSelectedLayersIndices([]);\n      setLayers([]);\n      selectedLayersRef.current = [];\n    };\n  };\n\n  const removeLayerFromState = (setLayers, layers) => {\n    return (layerID) => {\n      var newLayers = layers.filter((layer) => {\n        return layer.id !== layerID;\n      });\n      var newSelectedIndices = selectedLayersRef.current.filter((layer) => {\n        return layer !== layerID;\n      });\n      setSelectedLayersIndices(newSelectedIndices);\n      selectedLayersRef.current = newSelectedIndices;\n      setLayers(newLayers);\n    };\n  };\n\n  return (\n    <div>\n      <Sidebar\n        addLayersToState={addLayersToState(setLayers)}\n        removeLayersFromState={removeLayersFromState(setLayers)}\n        removeLayerFromState={removeLayerFromState(setLayers, layers)}\n        layers={layers}\n        selectedLayersIndices={selectedLayersIndices}\n        handleSelectedChange={handleSelectedChange()}\n        handleMetaChange={handleMetaChange(setLayers)}\n      />\n      <Map\n        layers={layers}\n        handleSelectedChange={handleSelectedChange()}\n        addLayersToState={addLayersToState(setLayers)}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","export function getRandomColor() {\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('app'));"],"sourceRoot":""}