{"version":3,"sources":["DropZone.js","LayerBar.js","components/InputField.js","utils/APIConnection.js","Sidebar.js","Map.js","App.js","utils/RandomColor.js","index.js"],"names":["baseStyle","flex","display","flexDirection","alignItems","padding","paddingLeft","paddingRight","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","outline","justifyContent","fontSize","activeStyle","acceptStyle","rejectStyle","Dropzone","addLayersToState","layers","enqueueSnackbar","onDropAccepted","useCallback","acceptedFiles","promises","file","filePromise","Promise","resolve","fr","FileReader","readAsText","onload","JSON","parse","result","push","all","then","files","variant","onDropRejected","rectedFiles","useDropzone","accept","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","style","useMemo","InputField","value","handleChange","type","onChange","Layer","layer","removeLayerFromState","handleMetaChange","useState","inputBox","setInputBox","name","layerName","setLayerName","key","id","className","selected","Fragment","ListItem","disableGutters","event","target","ClearOutlined","onClick","CheckOutlined","visibility","VisibilityOutlined","VisibilityOffOutlined","CreateOutlined","DeleteOutline","LayerBar","selectedLayersIndices","handleSelectedChange","map","HOST","getOperationFunction","inputData","operation","requestData","list","features","forEach","feature","concatGeoJSON","axios","post","response","data","catch","error","calculateSplitGeoJSON","console","log","newGeoJSON","concat","HeadLine","children","Operation","Sidebar","removeLayersFromState","setDraw","selectedLayers","filter","bufferSelected","setBufferSelected","bufferValue","setBufferValue","useSnackbar","layerOperation","closeSnackbar","useEffect","get","pingApi","List","disablePadding","draw","changeMode","DropZone","mapboxgl","accessToken","Map","setMap","mapContainer","useRef","addLayer","addSource","source","layout","paint","removeLayer","layerID","removeSource","getCurrentLayerIDs","getStyle","updateVisibility","getLayoutProperty","setLayoutProperty","updateSelectedOutline","setPaintProperty","initial_map","container","current","center","zoom","onCreation","e","getAll","deleteAll","on","addControl","resize","f","queryRenderedFeatures","point","length","initializeMap","currentLayers","removable","indexOf","addable","handleLayerUpdate","ref","el","App","props","setLayers","MapboxDraw","displayControlsDefault","controls","line_string","polygon","newValues","newValue","Math","random","toString","slice","i","floor","getRandomColor","layerId","change","prevLayers","maxSnack","newLayers","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.675cbc01.chunk.js","sourcesContent":["import React, { useCallback, useMemo } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport PublishIconLarge from \"@material-ui/icons/Publish\";\n\nconst baseStyle = {\n  flex: 1,\n  display: \"flex\",\n  flexDirection: \"row\",\n  alignItems: \"center\",\n  padding: \"20px\",\n  paddingLeft: \"20px\",\n  paddingRight: \"20px\",\n  borderWidth: 2,\n  borderRadius: 4,\n  borderColor: \"black\",\n  borderStyle: \"solid\",\n  backgroundColor: \"#e7e7e7\",\n  color: \"black\",\n  outline: \"none\",\n  justifyContent: \"space-around\",\n  //transition: \"border .24s ease-in-out\",\n  fontSize: \"18px\",\n};\n\nconst activeStyle = {\n  backgroundColor: \"#3a3a3a\",\n  color: \"white\",\n};\n\nconst acceptStyle = {\n  borderColor: \"white\",\n};\n\nconst rejectStyle = {\n  borderColor: \"white\",\n  borderStyle: \"solid\"\n};\n\nfunction Dropzone({ addLayersToState, layers, enqueueSnackbar }) {\n  const onDropAccepted = useCallback(\n    (acceptedFiles) => {\n      let promises = [];\n      for (let file of acceptedFiles) {\n        let filePromise = new Promise((resolve) => {\n          let fr = new FileReader();\n          fr.readAsText(file);\n          fr.onload = () => resolve(JSON.parse(fr.result));\n        });\n        promises.push(filePromise);\n      }\n\n      Promise.all(promises).then((files) => {\n        addLayersToState(files, \"upload\");\n        enqueueSnackbar(\"Successfully added layers to state\", { variant: \"success\"})\n      });\n    },\n    //eslint-disable-next-line\n    [layers]\n  );\n\n  const onDropRejected = useCallback(\n    (rectedFiles) => {\n        enqueueSnackbar(\"Error adding selected layers, try a valid geojson- or json-file\", { variant: \"error\"})\n    },\n    //eslint-disable-next-line\n    [layers]\n  );\n\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject,\n  } = useDropzone({ accept: [\".json\", \".geojson\"], onDropAccepted, onDropRejected});\n\n  const style = useMemo(\n    () => ({\n      ...baseStyle,\n      ...(isDragActive ? activeStyle : {}),\n      ...(isDragAccept ? acceptStyle : {}),\n      ...(isDragReject ? rejectStyle : {}),\n    }),\n    [isDragActive, isDragReject, isDragAccept]\n  );\n\n  return (\n    <div {...getRootProps({ style })}>\n      <input {...getInputProps()} />\n      Upload Layers\n      <PublishIconLarge />\n    </div>\n  );\n}\n\nexport default Dropzone;\n","import { ClearOutlined, CheckOutlined } from \"@material-ui/icons\";\nimport { ListItem } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport {\n  DeleteOutline,\n  CreateOutlined,\n  VisibilityOutlined,\n  VisibilityOffOutlined,\n} from \"@material-ui/icons\";\n\nconst InputField = ({value, handleChange}) => {\n  return <input type=\"text\" value={value} onChange={handleChange}></input>;\n};\n\nconst Layer = ({\n  layer,\n  removeLayerFromState,\n  handleMetaChange,\n}) => {\n  const [inputBox, setInputBox] = useState(false);\n  const [layerName, setLayerName] = useState(layer.name)\n\n  const handleNameChange = (event) => {\n    setLayerName(event.target.value)\n  }\n\n\n  return (\n    <div\n      key={layer.id}\n      className={\n        !layer.selected\n          ? \"layer-item\"\n          : \"layer-item-selected\"\n      }\n    >\n      {inputBox ? (\n        <React.Fragment>\n          <ListItem disableGutters>\n            <InputField value={layerName} handleChange={handleNameChange}/>\n          </ListItem>\n          <ClearOutlined\n            onClick={() => {\n              setLayerName(layer.name)\n              setInputBox(false);\n            }}\n          />\n          <CheckOutlined\n            onClick={() => {\n              setInputBox(false);\n              handleMetaChange(layer.id, \"name\", layerName)}\n            }\n          />\n        </React.Fragment>\n      ) : (\n        <React.Fragment>\n          <ListItem\n            disableGutters\n            onClick={() => {\n              handleMetaChange(layer.id, \"selected\", !layer.selected);\n            }}\n          >\n            {layer.name}\n          </ListItem>\n          {layer.visibility !== \"none\" ? (\n            <VisibilityOutlined\n              onClick={() => handleMetaChange(layer.id, \"visibility\", \"none\")}\n            />\n          ) : (\n            <VisibilityOffOutlined\n              onClick={() => handleMetaChange(layer.id, \"visibility\", \"visible\")}\n            ></VisibilityOffOutlined>\n          )}\n          <CreateOutlined onClick={() => setInputBox(true)} />\n          <DeleteOutline onClick={() => removeLayerFromState(layer.id)} />\n        </React.Fragment>\n      )}\n    </div>\n  );\n};\n\nconst LayerBar = ({\n  layers,\n  removeLayerFromState,\n  selectedLayersIndices,\n  handleSelectedChange,\n  handleMetaChange,\n}) => {\n  return (\n    <div>\n      {layers &&\n        layers.map((layer) => {\n          return (\n            <Layer\n              key={layer.id}\n              layer={layer}\n              removeLayerFromState={removeLayerFromState}\n              selectedLayersIndices={selectedLayersIndices}\n              handleSelectedChange={handleSelectedChange}\n              handleMetaChange={handleMetaChange}\n            />\n          );\n        })}\n    </div>\n  );\n};\n\nexport default LayerBar;\n","import React from 'react'\n\nconst InputField = ({value, handleChange}) => {\n    return <input type=\"text\" value={value} onChange={handleChange}></input>;\n  };\n\nexport default InputField","import axios from \"axios\";\n\nconst HOST = \"http://localhost:5000/api/\";\n//const HOST = \"https://tba4251-api.herokuapp.com/api/\"\n\nfunction concatGeoJSON(list) {\n  // used to combine features into one geojson for backend processing\n  let features = [];\n\n  list.forEach((feature) => {\n    features = [...feature.features, ...features];\n  });\n\n  let newGeoJSON = {\n    type: \"FeatureCollection\",\n    features: features,\n  };\n\n  return newGeoJSON;\n}\n\nexport function pingApi(enqueueSnackbar){\n  axios\n      .get(HOST + \"ping\")\n      .then((response) => {\n        enqueueSnackbar(\"Successfully connected with backend\", { variant: \"success\"})\n      })\n      .catch(function (error) {\n        enqueueSnackbar(\"Failed to connect with backend\", { variant: \"success\"})\n        // manipulate the error response here\n      });\n}\n\nexport function getOperationFunction(enqueueSnackbar, addLayersToState) {\n  return function(inputData, operation, value){\n    let requestData = concatGeoJSON(inputData);\n    if (value) requestData[\"value\"] = value;\n\n    return function () {\n      axios\n      .post(HOST + operation, requestData)\n      .then((response) => {\n        if(operation==\"symmetric_difference\") operation = \"sym_diff\"\n        addLayersToState([response.data], operation);\n        enqueueSnackbar(\"Successfully computed \" + operation, { variant: \"success\"})\n      })\n      .catch(function (error) {\n        enqueueSnackbar(\"Failed to execute  \" + operation + \" \" + error, { variant: \"error\"})\n        // manipulate the error response here\n      });\n  };\n  }\n}\nexport function calculateSplitGeoJSON(addLayersToState, inputData) {\n  return function () {\n    // used to combine features into one geojson for backend processing\n    let layers = [];\n    console.log(inputData)\n    inputData[0].features.forEach((feature) => {\n      let newGeoJSON = {\n        type: \"FeatureCollection\",\n        features: [feature],\n      };\n\n      layers = layers.concat(newGeoJSON);\n    });\n    addLayersToState(layers, \"split\");\n  };\n}\n","import React, { useState, useEffect } from \"react\";\nimport DropZone from \"./DropZone\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport LayerBar from \"./LayerBar\";\nimport LayersIcon from \"@material-ui/icons/Layers\";\nimport FunctionsIcon from \"@material-ui/icons/Functions\";\nimport ArrowForward from \"@material-ui/icons/ArrowForwardIosOutlined\";\nimport ClearOutlinedIcon from \"@material-ui/icons/ClearOutlined\";\nimport InputField from \"./components/InputField\";\nimport { ClearOutlined, CheckOutlined } from \"@material-ui/icons\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  calculateSplitGeoJSON,\n  getOperationFunction,\n  pingApi,\n} from \"./utils/APIConnection\";\n\nexport const HeadLine = ({ children }) => {\n  return <div className=\"headLine\">{children}</div>;\n};\n\nexport const Operation = ({ children, onClick }) => {\n  return (\n    <div className=\"operation\" onClick={onClick}>\n      {children}\n    </div>\n  );\n};\n\nconst Sidebar = ({\n  addLayersToState,\n  removeLayersFromState,\n  removeLayerFromState,\n  layers,\n  handleMetaChange,\n  setDraw,\n}) => {\n  var selectedLayers = layers.filter((layer) => layer.selected);\n\n  const [bufferSelected, setBufferSelected] = useState(false);\n  const [bufferValue, setBufferValue] = useState(10);\n\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const layerOperation = getOperationFunction(\n    enqueueSnackbar,\n    addLayersToState\n  );\n\n  useEffect(() => {\n    pingApi(enqueueSnackbar);\n  }, []);\n\n  const handleBufferValueChange = (event) => {\n    setBufferValue(event.target.value);\n  };\n\n  const onclickBuffer = () => {\n    layerOperation(selectedLayers, \"buffer\", bufferValue)();\n    setBufferSelected(false);\n  };\n\n  return (\n    <div className=\"sidebar\">\n      <List disablePadding>\n        <HeadLine>\n          <ListItem disableGutters>Operations</ListItem>\n          <FunctionsIcon />\n        </HeadLine>\n        <Operation\n          onClick={() => {\n            setDraw((draw) => draw.changeMode(\"draw_polygon\"));\n          }}\n        >\n          <ListItem\n            disableGutters\n          >\n            Draw Polygon\n          </ListItem>\n          <ArrowForward />\n        </Operation>\n\n        <Operation>\n          {!bufferSelected ? (\n            <React.Fragment>\n              <ListItem disableGutters onClick={() => setBufferSelected(true)}>\n                Featurewise Buffer\n              </ListItem>\n              <ArrowForward />\n            </React.Fragment>\n          ) : (\n            <React.Fragment>\n              <InputField\n                value={bufferValue}\n                handleChange={handleBufferValueChange}\n              />\n              <ClearOutlined onClick={() => setBufferSelected(false)} />\n              <CheckOutlined onClick={onclickBuffer} />\n            </React.Fragment>\n          )}\n        </Operation>\n        <Operation>\n          <ListItem\n            disableGutters\n            onClick={layerOperation(selectedLayers, \"union\")}\n          >\n            N-wise Union\n          </ListItem>\n          <ArrowForward />\n        </Operation>\n        <Operation>\n          <ListItem\n            disableGutters\n            onClick={layerOperation(selectedLayers, \"dissolve\")}\n          >\n            N-wise Dissolve\n          </ListItem>\n          <ArrowForward />\n        </Operation>\n\n        <Operation>\n          <ListItem\n            disableGutters\n            onClick={calculateSplitGeoJSON(addLayersToState, selectedLayers)}\n          >\n            Featurewise Split\n          </ListItem>\n          <ArrowForward />\n        </Operation>\n        <Operation>\n          <ListItem\n            disableGutters\n            onClick={layerOperation(selectedLayers, \"intersection\")}\n          >\n            Pairwise Intersection\n          </ListItem>\n          <ArrowForward />\n        </Operation>\n        <Operation>\n          <ListItem\n            disableGutters\n            onClick={layerOperation(selectedLayers, \"bbox\")}\n          >\n            Featurewise Bounding Box\n          </ListItem>\n          <ArrowForward />\n        </Operation>\n        <Operation>\n          <ListItem\n            disableGutters\n            onClick={layerOperation(selectedLayers, \"symmetric_difference\")}\n          >\n            Pairwise Symmetric Difference\n          </ListItem>\n          <ArrowForward />\n        </Operation>\n        <Operation>\n          <ListItem disableGutters onClick={removeLayersFromState}>\n            Remove All Layers\n          </ListItem>\n          <ClearOutlinedIcon />\n        </Operation>\n        <ListItem disableGutters>\n          <DropZone\n            accept=\"*.json\"\n            addLayersToState={addLayersToState}\n            layers={layers}\n            enqueueSnackbar={enqueueSnackbar}\n          />\n        </ListItem>\n        <HeadLine>\n          <ListItem disableGutters>Layers</ListItem>\n          <LayersIcon />\n        </HeadLine>\n        <LayerBar\n          layers={layers}\n          removeLayerFromState={removeLayerFromState}\n          handleMetaChange={handleMetaChange}\n        />\n      </List>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css\";\n\nmapboxgl.accessToken =\n  \"pk.eyJ1IjoidG9yc3RlaW4iLCJhIjoiY2s3YWJkdzk3MDU1bjNncnd0dWExN292YiJ9.te0K0gwI11dUd2qZs6FQ0g\";\n\nconst Map = ({\n  layers,\n  handleSelectedChange,\n  addLayersToState,\n  handleMetaChange,\n  draw,\n}) => {\n  // react hooks for storing the map\n  const [map, setMap] = useState(null);\n  const mapContainer = useRef(null);\n\n  // initial coordinates for Trondheim\n  const lng = 10.38;\n  const lat = 63.43;\n  const zoom = 13;\n\n  const initializeMap = (setMap, mapContainer) => {\n    const initial_map = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: \"mapbox://styles/mapbox/streets-v11\", // stylesheet location\n      center: [lng, lat],\n      zoom: zoom,\n    });\n    //initial_map.on(\"draw.delete\", updateArea);\n    //initial_map.on(\"draw.update\", updateArea);\n\n    function onCreation(e) {\n      var data = draw.getAll();\n      addLayersToState([data], \"drawTool\");\n      draw.deleteAll();\n      console.log(draw);\n    }\n\n    initial_map.on(\"load\", () => {\n      setMap(initial_map);\n      initial_map.addControl(draw);\n      initial_map.on(\"draw.create\", onCreation);\n\n      initial_map.resize();\n    });\n\n    initial_map.on(\"click\", (e) => {\n      let f = initial_map.queryRenderedFeatures(e.point, {\n        layers: getCurrentLayerIDs(initial_map),\n      });\n      if (f.length) {\n        // if you have clicked a number of layers\n        handleMetaChange(f.map((feature) => feature.layer.id)[0], \"selected\");\n      }\n    });\n  };\n\n  const addLayer = (layers) => {\n    layers.forEach((layer) => {\n      map.addSource(layer.id, {\n        type: \"geojson\",\n        data: layer,\n      });\n      map.addLayer({\n        id: layer.id,\n        type: \"fill\",\n        source: layer.id,\n        layout: {\n          visibility: \"visible\",\n        },\n        paint: {\n          \"fill-color\": layer.color,\n          \"fill-opacity\": 0.7,\n          \"fill-outline-color\": layer.color,\n        },\n      });\n    });\n  };\n\n  const removeLayer = (layers) => {\n    layers.forEach((layerID) => {\n      map.removeLayer(layerID);\n      map.removeSource(layerID);\n    });\n  };\n\n  const getCurrentLayerIDs = (map) => {\n    return map\n      .getStyle()\n      .layers.filter((layer) => {\n        return (\n          layer.source !== \"composite\" &&\n          layer.type !== \"background\" &&\n          layer.source !== \"mapbox-gl-draw-cold\" &&\n          layer.source !== \"mapbox-gl-draw-hot\"\n        );\n      })\n      .map((layer) => layer.id);\n  };\n\n  const updateVisibility = (layers) => {\n    layers.forEach((layer) => {\n      var visibility = map.getLayoutProperty(layer.id, \"visibility\");\n      if (visibility !== layer.visibility)\n        map.setLayoutProperty(layer.id, \"visibility\", layer.visibility);\n    });\n  };\n\n  const updateSelectedOutline = (layers) => {\n    layers.forEach((layer) => {\n      layer.selected\n        ? map.setPaintProperty(layer.id, \"fill-outline-color\", \"#000000\")\n        : map.setPaintProperty(layer.id, \"fill-outline-color\", layer.color);\n    });\n  };\n\n  const handleLayerUpdate = (layers, map) => {\n    const currentLayers = getCurrentLayerIDs(map);\n\n    const removable = currentLayers.filter(function (layer) {\n      //get the index for layers that have been deleted in the state\n      return layers.map((layer) => layer.id).indexOf(layer) === -1;\n    });\n\n    const addable = layers.filter(function (layer) {\n      //get the index for layers that have been added to the state\n      return currentLayers.indexOf(layer.id) === -1;\n    });\n\n    if (addable[0]) addLayer(addable);\n    if (removable[0]) removeLayer(removable);\n\n    updateVisibility(layers);\n    updateSelectedOutline(layers);\n  };\n\n  // render map on initial load\n  useEffect(() => {\n    if (!map) initializeMap(setMap, mapContainer);\n    // eslint-disable-next-line\n  }, [map]);\n\n  useEffect(() => {\n    // eslint-disable-next-line\n    if (map) handleLayerUpdate(layers, map);\n    // eslint-disable-next-line\n    console.log(\"Map\", \"Layers handled\");\n  }, [layers]);\n\n  return (\n    <div ref={(el) => (mapContainer.current = el)} className=\"mapContainer\" />\n  );\n};\n\nexport default Map;\n","import React, { useState } from \"react\";\nimport { SnackbarProvider } from \"notistack\";\nimport Sidebar from \"./Sidebar\";\nimport Map from \"./Map\";\nimport { getRandomColor } from \"./utils/RandomColor\";\nimport { pingApi } from \"./utils/APIConnection\";\nimport { useSnackbar } from \"notistack\";\nimport MapboxDraw from \"@mapbox/mapbox-gl-draw\";\n\nconst App = (props) => {\n  const [layers, setLayers] = useState([]);\n\n  const [draw, setDraw] = useState(\n    new MapboxDraw({\n      displayControlsDefault: false,\n      controls: {\n        point: false,\n        line_string: false,\n        polygon: false,\n      },\n    })\n  );\n\n  const addLayersToState = (setLayers) => {\n    return (newValues, operation) => {\n      newValues.forEach((newValue) => {\n        newValue[\"id\"] = operation + \"_\" + Math.random().toString(36).slice(2); //generates random name for the layer\n        newValue[\"name\"] =\n          operation + \"_\" + Math.random().toString(36).slice(2);\n        newValue[\"color\"] = getRandomColor(); //generates random color\n      });\n      setLayers((layers) => [...layers, ...newValues]);\n    };\n  };\n\n  const handleMetaChange = (setLayers) => {\n    return (layerId, key, change) => {\n      !change && key === \"selected\"\n        ? setLayers((prevLayers) =>\n            prevLayers.map((layer) =>\n              layer.id === layerId\n                ? { ...layer, [key]: !layer.selected }\n                : layer\n            )\n          )\n        : setLayers((prevLayers) =>\n            prevLayers.map((layer) =>\n              layer.id === layerId ? { ...layer, [key]: change } : layer\n            )\n          );\n    };\n  };\n\n  const removeLayersFromState = (setLayers) => {\n    return () => {\n      setLayers([]);\n    };\n  };\n\n  const removeLayerFromState = (setLayers, layers) => {\n    return (layerID) => {\n      var newLayers = layers.filter((layer) => {\n        return layer.id !== layerID;\n      });\n      setLayers(newLayers);\n    };\n  };\n\n  return (\n    <SnackbarProvider maxSnack={3}>\n      <div>\n        <Sidebar\n          addLayersToState={addLayersToState(setLayers)}\n          removeLayersFromState={removeLayersFromState(setLayers)}\n          removeLayerFromState={removeLayerFromState(setLayers, layers)}\n          layers={layers}\n          handleMetaChange={handleMetaChange(setLayers)}\n          setDraw={setDraw}\n        />\n        <Map\n          layers={layers}\n          addLayersToState={addLayersToState(setLayers)}\n          handleMetaChange={handleMetaChange(setLayers)}\n          draw={draw}\n        />\n      </div>\n    </SnackbarProvider>\n  );\n};\n\nexport default App;\n","export function getRandomColor() {\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('app'));"],"sourceRoot":""}