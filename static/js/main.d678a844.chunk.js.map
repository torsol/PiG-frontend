{"version":3,"sources":["images sync /^/.//.*$","images/Screenshot from 2020-12-18 11-15-07.png","images/buffer.png","images/buildings-lerkendal.png","images/control_panel.png","images/draw_polygons.png","images/fileupload.png","images/final.png","images/layer-change-name.png","images/layers-bar.png","images/lerkbuffer.png","images/lerkendals.png","images/nidaros-buffer.png","images/nidaros-selected.png","images/nidaros-symmetric.png","images/polygon.png","images/split.png","images/tooltip.png","images/welcome.png","components/DropZone.js","components/InputField.js","components/Layer.js","components/LayerBar.js","utils/APIConnection.js","components/Operation.js","components/Sidebar.js","components/Map.js","utils/Randomizer.js","components/Tutorial.js","App.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","baseStyle","flex","display","flexDirection","alignItems","padding","paddingLeft","paddingRight","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","outline","justifyContent","fontSize","activeStyle","acceptStyle","rejectStyle","Dropzone","addLayersToState","layers","enqueueSnackbar","onDropAccepted","useCallback","acceptedFiles","promises","file","filePromise","Promise","fr","FileReader","readAsText","onload","JSON","parse","result","push","all","then","files","variant","onDropRejected","rectedFiles","useDropzone","accept","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","style","useMemo","InputField","value","handleChange","type","onChange","Layer","layer","removeLayerFromState","handleMetaChange","useState","inputBox","setInputBox","name","layerName","setLayerName","key","className","selected","Fragment","ListItem","disableGutters","event","target","length","ClearOutlined","onClick","CheckOutlined","visibility","VisibilityOutlined","VisibilityOffOutlined","CreateOutlined","DeleteOutline","LayerBar","HOST","getOperationFunction","inputData","operation","requestData","list","features","forEach","feature","concatGeoJSON","axios","post","response","data","catch","error","calculateSplitGeoJSON","console","log","newGeoJSON","concat","TextOnlyTooltip","withStyles","tooltip","Tooltip","Operation","icon","selectable","enabled","popoverText","setSelected","setValue","useStyles","makeStyles","theme","typography","spacing","width","boxShadow","border","toggleSelect","closeAndExectue","classes","React","anchorEl","setAnchorEl","open","Boolean","title","currentTarget","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","Typography","operationTexts","require","HeadLine","children","Sidebar","removeLayersFromState","setDraw","selectedLayers","filter","useSnackbar","layerOperation","useEffect","get","pingApi","List","disablePadding","draw","changeMode","draw_polygon","buffer","union","dissolve","split","intersection","bbox","symmetric_difference","DropZone","mapboxgl","accessToken","Map","setMap","mapContainer","useRef","addLayer","addSource","source","layout","paint","removeLayer","layerID","removeSource","getCurrentLayerIDs","getStyle","updateVisibility","getLayoutProperty","setLayoutProperty","updateSelectedOutline","setPaintProperty","initial_map","container","current","center","zoom","onCreation","getAll","deleteAll","on","addControl","resize","f","queryRenderedFeatures","point","getMode","initializeMap","currentLayers","removable","indexOf","addable","handleLayerUpdate","ref","el","getRandomString","characters","charactersLength","i","charAt","Math","floor","random","tutorialContent","media","height","paddingTop","forward","backward","transform","actions","paddingBottom","content","Tutorial","step","setStep","visible","setVisibility","toggleVisibility","Card","CardMedia","image","CardActions","IconButton","CardHeader","titleTypographyProps","CardContent","component","detailed","link","href","Button","size","App","setLayers","MapboxDraw","displayControlsDefault","controls","line_string","polygon","newValues","newValue","getRandomColor","layerId","change","prevLayers","maxSnack","newLayers","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d678a844.chunk.js","sourcesContent":["var map = {\n\t\"./Screenshot from 2020-12-18 11-15-07.png\": 139,\n\t\"./buffer.png\": 140,\n\t\"./buildings-lerkendal.png\": 141,\n\t\"./control_panel.png\": 142,\n\t\"./draw_polygons.png\": 143,\n\t\"./fileupload.png\": 144,\n\t\"./final.png\": 145,\n\t\"./layer-change-name.png\": 146,\n\t\"./layers-bar.png\": 147,\n\t\"./lerkbuffer.png\": 148,\n\t\"./lerkendals.png\": 149,\n\t\"./nidaros-buffer.png\": 150,\n\t\"./nidaros-selected.png\": 151,\n\t\"./nidaros-symmetric.png\": 152,\n\t\"./polygon.png\": 153,\n\t\"./split.png\": 154,\n\t\"./tooltip.png\": 155,\n\t\"./welcome.png\": 156\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 138;","module.exports = __webpack_public_path__ + \"static/media/Screenshot from 2020-12-18 11-15-07.71ffb574.png\";","module.exports = __webpack_public_path__ + \"static/media/buffer.2c78145a.png\";","module.exports = __webpack_public_path__ + \"static/media/buildings-lerkendal.04723295.png\";","module.exports = __webpack_public_path__ + \"static/media/control_panel.99a5a2cd.png\";","module.exports = __webpack_public_path__ + \"static/media/draw_polygons.f1cd26e7.png\";","module.exports = __webpack_public_path__ + \"static/media/fileupload.d8129ab2.png\";","module.exports = __webpack_public_path__ + \"static/media/final.20ec7e4c.png\";","module.exports = __webpack_public_path__ + \"static/media/layer-change-name.545560c8.png\";","module.exports = __webpack_public_path__ + \"static/media/layers-bar.1962a5e0.png\";","module.exports = __webpack_public_path__ + \"static/media/lerkbuffer.b6206d93.png\";","module.exports = __webpack_public_path__ + \"static/media/lerkendals.b3f13fb7.png\";","module.exports = __webpack_public_path__ + \"static/media/nidaros-buffer.4cbd7f50.png\";","module.exports = __webpack_public_path__ + \"static/media/nidaros-selected.ff0a1e29.png\";","module.exports = __webpack_public_path__ + \"static/media/nidaros-symmetric.17ed7876.png\";","module.exports = __webpack_public_path__ + \"static/media/polygon.6b958f71.png\";","module.exports = __webpack_public_path__ + \"static/media/split.f3cf2798.png\";","module.exports = __webpack_public_path__ + \"static/media/tooltip.d25c112d.png\";","module.exports = __webpack_public_path__ + \"static/media/welcome.b8da382a.png\";","import React, { useCallback, useMemo } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport PublishIconLarge from \"@material-ui/icons/Publish\";\n\n\n// Used inline styles because the useDropzone component had trouble reading the css-file\nconst baseStyle = {\n  flex: 1,\n  display: \"flex\",\n  flexDirection: \"row\",\n  alignItems: \"center\",\n  padding: \"20px\",\n  paddingLeft: \"20px\",\n  paddingRight: \"20px\",\n  borderWidth: 2,\n  borderRadius: 4,\n  borderColor: \"black\",\n  borderStyle: \"solid\",\n  backgroundColor: \"#43a047\",\n  color: \"white\",\n  outline: \"none\",\n  justifyContent: \"space-around\",\n  fontSize: \"18px\",\n};\n\nconst activeStyle = {\n  backgroundColor: \"#3a3a3a\",\n  color: \"white\",\n};\n\nconst acceptStyle = {\n  borderColor: \"white\",\n};\n\nconst rejectStyle = {\n  borderColor: \"white\",\n  borderStyle: \"solid\"\n};\n\n/** \n* This is the component that uses the useDropzone-library to create the upload-functionality to the site\n* @param  addLayersToState - This is the function passed from App that enables adding of new layers to state\n* @param  enqueueSnackbar - The enqueueSnackbar function is also passed from App, and enables the notification for successful upload\n* @return The function returns the \"Upload Layers\"-field in the control panel\n*/\nfunction Dropzone({ addLayersToState, layers, enqueueSnackbar }) {\n  /*\n    This useCallback function is triggered on acceptet files, reading them and adding them to state\n  */\n  const onDropAccepted = useCallback(\n    (acceptedFiles) => {\n      let promises = [];\n      for (let file of acceptedFiles) {\n        let filePromise = new Promise((resolve) => {\n          let fr = new FileReader();\n          fr.readAsText(file);\n          fr.onload = () => resolve(JSON.parse(fr.result));\n        });\n        promises.push(filePromise);\n      }\n\n      Promise.all(promises).then((files) => {\n        addLayersToState(files, \"upload\");\n        enqueueSnackbar(\"Successfully added layers to state\", { variant: \"success\"})\n      });\n    },\n    //eslint-disable-next-line\n    [layers]\n  );\n\n    /*\n    This useCallback function is triggered on rejected files, using the snackbar to show an error\n     */\n  const onDropRejected = useCallback(\n    (rectedFiles) => {\n        enqueueSnackbar(\"Error adding selected layers, try a valid geojson- or json-file\", { variant: \"error\"})\n    },\n    //eslint-disable-next-line\n    [layers]\n  );\n\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject,\n  } = useDropzone({ accept: [\".json\", \".geojson\"], onDropAccepted, onDropRejected}); // Declaring the useDropzone, specifiying geojson and json as legal file-types\n\n  /*\n    useMemo is used to toggle styling of the component, if a user is dragging a file\n     */\n  const style = useMemo(\n    () => ({\n      ...baseStyle,\n      ...(isDragActive ? activeStyle : {}),\n      ...(isDragAccept ? acceptStyle : {}),\n      ...(isDragReject ? rejectStyle : {}),\n    }),\n    [isDragActive, isDragReject, isDragAccept]\n  );\n\n  /*\n    This is using the props from the useDropzone-hook to render the component. \n     */\n  return (\n    <div {...getRootProps({ style })}>\n      <input {...getInputProps()} />\n      Upload Layers\n      <PublishIconLarge />\n    </div>\n  );\n}\n\nexport default Dropzone;\n","import React from 'react'\n\n/** \n* This is a helper-component that captures some of the functionality of a controlled component\n* @param  value - The value of the input field\n* @param  handleChange - Function that defines what to do with a change in value\n* @return A controlled input-field\n*/\nconst InputField = ({value, handleChange}) => {\n    return <input type=\"text\" value={value} onChange={handleChange}></input>;\n  };\n\nexport default InputField","import { ClearOutlined, CheckOutlined } from \"@material-ui/icons\";\nimport { ListItem } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport InputField from \"./InputField\";\nimport {\n  DeleteOutline,\n  CreateOutlined,\n  VisibilityOutlined,\n  VisibilityOffOutlined,\n} from \"@material-ui/icons\";\n\n/** \n* This is the component controlling a single state in the layer bar\n* @param  layer - The value of the layer in state\n* @param  removeLayerFromState - Function that enables the removal of the layer from the layerbar\n* @param  handleMetaChange - function that allows name- and visibility change\n* @return A layer in the layer bar\n*/\nconst Layer = ({\n    layer,\n    removeLayerFromState,\n    handleMetaChange,\n  }) => {\n\n    //Internal state controlling the toggling of input box and layer name\n    const [inputBox, setInputBox] = useState(false);\n    const [layerName, setLayerName] = useState(layer.name)\n  \n    const handleNameChange = (event) => {\n      if(event.target.value.length < 19) setLayerName(event.target.value)\n    }\n  \n  \n    return (\n      <div\n        key={layer.id}\n        className={\n          !layer.selected\n            ? \"layer-item\"\n            : \"layer-item-selected\"\n        }\n      >\n          {/* The div uses the selected-value to determine the styling of the layer */}\n        {inputBox ? (\n          <React.Fragment>\n              {/* If name-change has been selected show these components*/}\n            <ListItem disableGutters>\n              <InputField value={layerName} handleChange={handleNameChange}/>\n            </ListItem>\n            <ClearOutlined\n              onClick={() => {\n                setLayerName(layer.name)\n                setInputBox(false);\n              }}\n            />\n            <CheckOutlined\n              onClick={() => {\n                setInputBox(false);\n                handleMetaChange(layer.id, \"name\", layerName)}\n              }\n            />\n          </React.Fragment>\n        ) : (\n          <React.Fragment>\n              {/* If not, show these components */}\n              {/* If you click the layer, it toggles the selected-property */}\n            <ListItem\n              disableGutters\n              onClick={() => {\n                handleMetaChange(layer.id, \"selected\", !layer.selected);\n              }}\n            >\n              {layer.name}\n            </ListItem>\n            {/* Toggle the visibility-icon based on visibility */}\n            {layer.visibility !== \"none\" ? (\n              <VisibilityOutlined\n                onClick={() => handleMetaChange(layer.id, \"visibility\", \"none\")}\n              />\n            ) : (\n              <VisibilityOffOutlined\n                onClick={() => handleMetaChange(layer.id, \"visibility\", \"visible\")}\n              ></VisibilityOffOutlined>\n            )}\n            {/* Select name-change */}\n            <CreateOutlined onClick={() => setInputBox(true)} />\n            {/* Delete layer using removeLayerFromState */}\n            <DeleteOutline onClick={() => removeLayerFromState(layer.id)} />\n          </React.Fragment>\n        )}\n      </div>\n    );\n  };\n\nexport default Layer;","import React from \"react\";\nimport Layer from \"./Layer\";\n\n\n/** \n* This is the component creating and containing all the Layer-components\n* @param  layer - all layers in state\n* @param  removeLayerFromState - Function that enables the removal of the layer from the layerbar\n* @param  handleMetaChange - function that allows name- and visibility change\n* @return - a scrollable list of layers\n*/\nconst LayerBar = ({\n  layers,\n  removeLayerFromState,\n  handleMetaChange,\n}) => {\n  return (\n    <div className=\"scroll\">\n      {layers &&\n        layers.map((layer) => {\n          return (\n            <Layer\n              key={layer.id}\n              layer={layer}\n              removeLayerFromState={removeLayerFromState}\n              handleMetaChange={handleMetaChange}\n            />\n          );\n        })}\n    </div>\n  );\n};\n\nexport default LayerBar;\n","import axios from \"axios\";\n\nconst HOST = \"http://localhost:5000/api/\";\n//const HOST = \"https://tba4251-api.herokuapp.com/api/\"\n\nfunction concatGeoJSON(list) {\n  // used to combine features into one geojson for backend processing\n  let features = [];\n\n  list.forEach((feature) => {\n    features = [...feature.features, ...features];\n  });\n\n  let newGeoJSON = {\n    type: \"FeatureCollection\",\n    features: features,\n  };\n\n  return newGeoJSON;\n}\n\nexport function pingApi(enqueueSnackbar){\n  axios\n      .get(HOST + \"ping\")\n      .then((response) => {\n        enqueueSnackbar(\"Successfully connected with backend\", { variant: \"success\"})\n      })\n      .catch(function (error) {\n        enqueueSnackbar(\"Failed to connect with backend\", { variant: \"success\"})\n        // manipulate the error response here\n      });\n}\n\nexport function getOperationFunction(enqueueSnackbar, addLayersToState) {\n  return function(inputData, operation, value){\n    let requestData = concatGeoJSON(inputData);\n    if (value) requestData[\"value\"] = value;\n\n    return function () {\n      axios\n      .post(HOST + operation, requestData)\n      .then((response) => {\n        if(operation === \"symmetric_difference\") operation = \"sym_diff\"\n        addLayersToState([response.data], operation);\n        enqueueSnackbar(\"Successfully computed \" + operation, { variant: \"success\"})\n      })\n      .catch(function (error) {\n        enqueueSnackbar(\"Failed to execute  \" + operation + \" \" + error, { variant: \"error\"})\n        // manipulate the error response here\n      });\n  };\n  }\n}\nexport function calculateSplitGeoJSON(addLayersToState, inputData) {\n  return function () {\n    // used to combine features into one geojson for backend processing\n    let layers = [];\n    console.log(inputData)\n    inputData[0].features.forEach((feature) => {\n      let newGeoJSON = {\n        type: \"FeatureCollection\",\n        features: [feature],\n      };\n\n      layers = layers.concat(newGeoJSON);\n    });\n    addLayersToState(layers, \"split\");\n  };\n}\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Popover from \"@material-ui/core/Popover\";\nimport Typography from \"@material-ui/core/Typography\";\nimport HelpOutlineIcon from \"@material-ui/icons/HelpOutlineOutlined\";\n\nimport InputField from \"./InputField\";\nimport { ClearOutlined, CheckOutlined } from \"@material-ui/icons\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Tooltip } from \"@material-ui/core\";\n\n// custom inline styling for the tooltip that doesnt work from regular css\nconst TextOnlyTooltip = withStyles({\n  tooltip: {\n    fontSize: \"13px\",\n  },\n})(Tooltip);\n\n\n/** \n* The operation-component handles all internal state of the different operation-functionality\n* @param  onClick - Function that should be triggered when clicking an operation\n* @param  name - name of the operation\n* @param  icon - the icon for the operation\n* @param  selectable - wether the user can select the operation with the current selected layers\n* @param  enabled - wether the user can select the operation with the current selected layers\n* @param  popoverText - The text that is shown when clicking the help-icon of the operation\n* @return - a scrollable list of layers\n*/\nconst Operation = ({ onClick, name, icon, selectable, enabled, popoverText }) => {\n  const [selected, setSelected] = useState(false);\n  const [value, setValue] = useState(10);\n\n  // custom inline styling for the tooltip that doesnt work from regular css\n  const useStyles = makeStyles((theme) => ({\n    typography: {\n      padding: theme.spacing(2),\n      width: 200,\n      fontSize: \"13px\",\n      boxShadow: \"0px\",\n      border: \"1px\",\n      borderStyle: \"solid\",\n      borderColor: \"black\",\n      borderRadius: \"4px\"\n    },\n  }));\n\n  const toggleSelect = () => {\n    return enabled ? setSelected(!selected) : null;\n  };\n\n  const Execute = () => {\n    return enabled ? onClick() : null;\n  };\n\n  const closeAndExectue = (value) => {\n    if (enabled) {\n      onClick(value);\n      toggleSelect();\n    }\n  };\n\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  function handleClick(event) {\n    setAnchorEl(event.currentTarget);\n  }\n\n  function handleClose() {\n    setAnchorEl(null);\n  }\n\n  const open = Boolean(anchorEl);\n  const id = open ? \"simple-popover\" : null;\n\n  return (\n    <React.Fragment>\n      {!selected ? (\n        <div className=\"operationdiv\">\n          <ListItem\n            onClick={selectable ? toggleSelect : () => Execute()}\n            className={enabled ? \"operation\" : \"disabledOperation\"}\n            disableGutters\n          >\n            {name}\n          </ListItem>\n          {icon ? icon : <HelpOutlineIcon onClick={handleClick} />}\n        </div>\n      ) : (\n        <div className=\"operation\">\n          <TextOnlyTooltip title={\"Enter buffer [m]\"}>\n            <ListItem disableGutters>\n              <InputField\n                value={value}\n                handleChange={(e) => setValue(e.target.value)}\n              />\n            </ListItem>\n          </TextOnlyTooltip>\n          <ClearOutlined onClick={toggleSelect} />\n          <CheckOutlined onClick={() => closeAndExectue(value)} />\n        </div>\n      )}\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\",\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"center\",\n        }}\n      >\n        <Typography className={classes.typography}>\n          {popoverText}\n        </Typography>\n      </Popover>\n    </React.Fragment>\n  );\n};\n\nexport default Operation;\n","import React, { useEffect } from \"react\";\nimport DropZone from \"./DropZone\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport LayerBar from \"./LayerBar\";\nimport LayersIcon from \"@material-ui/icons/Layers\";\nimport ClearOutlinedIcon from \"@material-ui/icons/ClearOutlined\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  calculateSplitGeoJSON,\n  getOperationFunction,\n  pingApi,\n} from \"../utils/APIConnection\";\nimport Operation from \"./Operation\"\n\nvar operationTexts = require('../data/operations.json');\n\n// Simple component for the headlines in the sidebar\nexport const HeadLine = ({ children }) => {\n  return <div className=\"headLine\">{children}</div>;\n};\n\n/** \n* The sidebar component contains the operations, dropzone and layerbar\n* @param  addLayersToState - function that enables adding of layers to application state\n* @param  removeLayersFromState - function that enables removal of layers from application state\n* @param  layers - all the layers in application state\n* @param  handleMetaChange - function that allows name-, selected- and visibility-change\n* @param  setDraw - function that enables us to set the current state of the mapbox-draw functionality\n* @param  popoverText - The text that is shown when clicking the help-icon of the operation\n* @return - Returns the sidebar\n*/\nconst Sidebar = ({\n  addLayersToState,\n  removeLayersFromState,\n  removeLayerFromState,\n  layers,\n  handleMetaChange,\n  setDraw,\n}) => {\n\n  // compile the list of selected layers from state\n  var selectedLayers = layers.filter((layer) => layer.selected);\n\n  // enable the snackbar for notifications\n  const { enqueueSnackbar } = useSnackbar();\n\n  // enable the layerOperation with snackbar and addlayerstostate-functionality\n  const layerOperation = getOperationFunction(\n    enqueueSnackbar,\n    addLayersToState\n  );\n  \n  // create onClick functionality \n  const onClickBuffer = () => {\n    return (value) => {\n      layerOperation(selectedLayers, \"buffer\", value)();\n    };\n  };\n\n  // ping the api on load in order to wake the API up. \n  useEffect(() => {\n    pingApi(enqueueSnackbar);\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div className=\"sidebar\">\n      <List disablePadding>\n        <HeadLine>\n          <ListItem disableGutters>Control Panel</ListItem>\n        </HeadLine>\n        <Operation\n          onClick={() => {\n            setDraw((draw) => draw.changeMode(\"draw_polygon\"));\n          }}\n          name=\"Draw Polygon\"\n          enabled={true}\n          popoverText={operationTexts.draw_polygon}\n        />\n        <Operation\n          name=\"Buffer\"\n          onClick={onClickBuffer()}\n          selectable={true}\n          enabled={selectedLayers.length >= 1}\n          popoverText={operationTexts.buffer}\n        />\n        <Operation\n          name=\"Union\"\n          onClick={layerOperation(selectedLayers, \"union\")}\n          enabled={selectedLayers.length >= 2}\n          popoverText={operationTexts.union}\n        />\n        <Operation\n          name=\"Dissolve\"\n          onClick={layerOperation(selectedLayers, \"dissolve\")}\n          enabled={selectedLayers.length === 1}\n          popoverText={operationTexts.dissolve}\n        ></Operation>\n\n        <Operation\n          onClick={calculateSplitGeoJSON(addLayersToState, selectedLayers)}\n          name=\"Split\"\n          enabled={selectedLayers.length >= 1}\n          popoverText={operationTexts.split}\n        />\n        <Operation\n          onClick={layerOperation(selectedLayers, \"intersection\")}\n          name=\"Intersection\"\n          enabled={selectedLayers.length === 2}\n          popoverText={operationTexts.intersection}\n        />\n        <Operation\n          onClick={layerOperation(selectedLayers, \"bbox\")}\n          name=\"Bounding Box\"\n          enabled={selectedLayers.length >= 1}\n          popoverText={operationTexts.bbox}\n        />\n        <Operation\n          onClick={layerOperation(selectedLayers, \"symmetric_difference\")}\n          name=\"Symmetric Difference\"\n          enabled={selectedLayers.length === 2}\n          popoverText={operationTexts.symmetric_difference}\n        />\n        <Operation\n          onClick={removeLayersFromState}\n          name=\"Remove All Layers\"\n          icon={<ClearOutlinedIcon />}\n          enabled={layers.length > 0}\n        />\n        <ListItem disableGutters>\n          <DropZone\n            accept=\"*.json\"\n            addLayersToState={addLayersToState}\n            layers={layers}\n            enqueueSnackbar={enqueueSnackbar}\n          />\n        </ListItem>\n        <HeadLine>\n          <ListItem disableGutters>Layers</ListItem>\n          <LayersIcon />\n        </HeadLine>\n        <LayerBar\n          layers={layers}\n          removeLayerFromState={removeLayerFromState}\n          handleMetaChange={handleMetaChange}\n        />\n      </List>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css\";\n\n// Necessary access-token in order to use the mapbox GL library\nmapboxgl.accessToken =\n  \"pk.eyJ1IjoidG9yc3RlaW4iLCJhIjoiY2s3YWJkdzk3MDU1bjNncnd0dWExN292YiJ9.te0K0gwI11dUd2qZs6FQ0g\";\n\n/** \n* The map component contains all logic related to the rendered map in the client\n* @param  layers - all layers in state\n* @param  addLayersToState - Function that enables the addin of layers to state\n* @param  removeLayerFromState - Function that enables the removal of the layer from the layerbar\n* @param  handleMetaChange - function that allows name-, selected- and visibility-change\n* @return - a scrollable list of layers\n*/\nconst Map = ({\n  layers,\n  addLayersToState,\n  handleMetaChange,\n  draw,\n}) => {\n  // react hooks for storing the map\n  const [map, setMap] = useState(null);\n  const mapContainer = useRef(null);\n\n  // initial coordinates for Trondheim\n  const lng = 10.38;\n  const lat = 63.43;\n  const zoom = 13;\n\n\n  // function that is run on initialization, creating the map and connecting necessary map modules\n  const initializeMap = (setMap, mapContainer) => {\n    const initial_map = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: \"mapbox://styles/torstein/ckhxghcb708qg19mtz7urlkdx\", // stylesheet location\"\n      center: [lng, lat],\n      zoom: zoom,\n    });\n\n    // onCreation is triggered when draw polygon is created, adding the polygon to state\n    function onCreation(e) {\n      var data = draw.getAll();\n      addLayersToState([data], \"drawTool\");\n      draw.deleteAll();\n    }\n\n    // When map has loaded, add the map to component state, and add onCreation to action handler\n    initial_map.on(\"load\", () => {\n      setMap(initial_map);\n      initial_map.addControl(draw);\n      initial_map.on(\"draw.create\", onCreation);\n      initial_map.resize();\n    });\n\n    // Functionality that handles the clicking on layers on map. \n    initial_map.on(\"click\", (e) => {\n      // f is the layers covered by the click position of the event\n      let f = initial_map.queryRenderedFeatures(e.point, {\n        layers: getCurrentLayerIDs(initial_map),\n      });\n      if (f.length && draw.getMode() !== \"draw_polygon\") {\n        // if you have clicked a number of layers, select the top layer\n        handleMetaChange(f.map((feature) => feature.layer.id)[0], \"selected\");\n      }\n    });\n  };\n\n  // addLayer adds new layers to the mapbox state by creating a source and layer for each layer in state\n  const addLayer = (layers) => {\n    layers.forEach((layer) => {\n      map.addSource(layer.id, {\n        type: \"geojson\",\n        data: layer,\n      });\n      map.addLayer({\n        id: layer.id,\n        type: \"fill\",\n        source: layer.id,\n        layout: {\n          visibility: \"visible\",\n        },\n        paint: {\n          \"fill-color\": layer.color,\n          \"fill-opacity\": 0.7,\n          \"fill-outline-color\": layer.color,\n        },\n      });\n    });\n  };\n\n  // function that removes layer from mapbox-state using the individual layer ids\n  const removeLayer = (layers) => {\n    layers.forEach((layerID) => {\n      map.removeLayer(layerID);\n      map.removeSource(layerID);\n    });\n  };\n\n  // getCurrentLayerIDs retrieves all the local mapbox-layer-ids added by the user, by filtering out the premade layers\n  const getCurrentLayerIDs = (map) => {\n    return map\n      .getStyle()\n      .layers.filter((layer) => {\n        return (\n          layer.source !== \"composite\" &&\n          layer.type !== \"background\" &&\n          layer.source !== \"mapbox-gl-draw-cold\" &&\n          layer.source !== \"mapbox-gl-draw-hot\"\n        );\n      })\n      .map((layer) => layer.id);\n  };\n\n  // updateVisibility loops through all layers and changes the mapbox-layers that does not match the visibility property in state\n  const updateVisibility = (layers) => {\n    layers.forEach((layer) => {\n      var visibility = map.getLayoutProperty(layer.id, \"visibility\");\n      if (visibility !== layer.visibility)\n        map.setLayoutProperty(layer.id, \"visibility\", layer.visibility);\n    });\n  };\n\n  // updateSelectedOutline changes the styling of the layer when it is selected/deselected.\n  // selected layers will get a black border around them \n  const updateSelectedOutline = (layers) => {\n    layers.forEach((layer) => {\n      layer.selected\n        ? map.setPaintProperty(layer.id, \"fill-outline-color\", \"#000000\")\n        : map.setPaintProperty(layer.id, \"fill-outline-color\", layer.color);\n    });\n  };\n\n  // handleLayerUpdate handles all the changes related to an update in application State\n  const handleLayerUpdate = (layers, map) => {\n\n    // get all mapbox-layers\n    const currentLayers = getCurrentLayerIDs(map);\n\n    // get the index of mapbox-layers that has been deleted in the application State\n    const removable = currentLayers.filter(function (layer) {\n      //get the index for layers that have been deleted in the state\n      return layers.map((layer) => layer.id).indexOf(layer) === -1;\n    });\n\n    //get the index for layers that have been added to the state\n    const addable = layers.filter(function (layer) {\n      return currentLayers.indexOf(layer.id) === -1;\n    });\n\n    // add layers that needs to be in the mapbox-state\n    if (addable[0]) addLayer(addable);\n\n    //remove layers that is no longer in application-state\n    if (removable[0]) removeLayer(removable);\n\n    updateVisibility(layers);\n    updateSelectedOutline(layers);\n  };\n\n  // render map on initial load\n  useEffect(() => {\n    if (!map) initializeMap(setMap, mapContainer);\n    // eslint-disable-next-line\n  }, [map]);\n\n\n  // useEffect is a react-hook that triggers on all layers-updates\n  useEffect(() => {\n    if (map) handleLayerUpdate(layers, map);\n    console.log(\"Map\", \"Layers handled\");\n    // eslint-disable-next-line\n  }, [layers]);\n\n  return (\n    <div ref={(el) => (mapContainer.current = el)} className=\"mapContainer\" />\n  );\n};\n\nexport default Map;\n","export function getRandomColor() {\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n\nexport function getRandomString(length) {\n    var result           = '';\n    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for ( var i = 0; i < length; i++ ) {\n       result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n }\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ArrowForward from \"@material-ui/icons/ArrowForwardIosOutlined\";\n\n// load the content of the tutorial\nvar tutorialContent = require('../data/tutorial.json');\n\n// styles that came witht he Material UI template\nconst useStyles = makeStyles((theme) => ({\n  media: {\n    height: 0,\n    paddingTop: \"56.25%\", // 16:9\n  },\n  forward: {},\n  backward: {\n    transform: \"rotate(-180deg)\",\n  },\n  actions: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    paddingBottom: \"0px\"\n  },\n  content: {\n    paddingTop: \"0px\",\n    paddingBottom: \"0px\"\n  }\n}));\n\n/** \n*The tutorial is the component in the top-right corner \n*/\nfunction Tutorial() {\n  const classes = useStyles();\n\n  // the state of the tutorial, controlling visibility and step\n  const [step, setStep] = useState(0);\n  const [visible, setVisibility] = useState(false);\n\n  // incrementing the step\n  const nextStep = () => {\n    if (step + 1 < tutorialContent.length) {\n      setStep(step + 1);\n    }\n  };\n\n  // decrement the step\n  const prevStep = () => {\n    if (step - 1 >= 0) {\n      setStep(step - 1);\n    }\n  };\n\n  // toggle the visibility\n  const toggleVisibility = () => {\n    setVisibility(!visible);\n  };\n\n  return visible ? (\n    <Card className=\"tutorial\">\n      {/*The card is a material UI component containing the tutorial*/}\n      <CardMedia\n        className={classes.media}\n        image={require(\"../images/\" + tutorialContent[step].image)}\n      />\n      {/*THe cardmedia is responsible for showing the correct image for each step*/}\n      <CardActions className={classes.actions}>\n        {/*The card actions contains the title of the step, including the step forward and backward-functionality*/}\n        <IconButton className={classes.backward} onClick={prevStep}>\n          <ArrowForward />\n        </IconButton>\n        <CardHeader title={tutorialContent[step].title} titleTypographyProps={{variant:'h6' }}/>\n        <IconButton className={classes.forward} onClick={nextStep}>\n          <ArrowForward />\n        </IconButton>\n      </CardActions>\n      <CardContent className={classes.content}>\n        {/*All the paragraphs are rendered here*/}\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          {tutorialContent[step].detailed.split(\"\\n\").map((i, key) => {\n            return <p key={key}>{i}</p>;\n          })}\n          {tutorialContent[step].link ? (<a href={tutorialContent[step].link}>Get file here</a>): <p/>}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button size=\"small\" color=\"black\" onClick={toggleVisibility}>\n          Hide tutorial\n        </Button>\n      </CardActions>\n    </Card>\n  ) : (\n    <Card className=\"showtutorial\">\n      {/*The button that is shown when the tutorial is hidden*/}\n      <Button size=\"large\" onClick={toggleVisibility}>\n        Show Tutorial\n      </Button>\n    </Card>\n  );\n}\n\nexport default Tutorial;\n","import React, { useState } from \"react\";\nimport { SnackbarProvider } from \"notistack\";\nimport Sidebar from \"./components/Sidebar\";\nimport Map from \"./components/Map\";\nimport { getRandomColor, getRandomString } from \"./utils/Randomizer\";\nimport MapboxDraw from \"@mapbox/mapbox-gl-draw\";\nimport Tutorial from \"./components/Tutorial\";\n\n\n/*\n* The main component of the application, containing the state and other components. \n*/\nconst App = () => {\n\n  // The layers added to the application\n  const [layers, setLayers] = useState([]);\n\n\n  // the mapbox-draw component\n  const [draw, setDraw] = useState(\n    new MapboxDraw({\n      displayControlsDefault: false,\n      controls: {\n        point: false,\n        line_string: false,\n        polygon: false,\n      },\n    })\n  );\n\n  // addLayersToState creates new layers in the state by adding id, name and color to the added geojson\n  const addLayersToState = (setLayers) => {\n    return (newValues, operation) => {\n      newValues.forEach((newValue) => {\n        newValue[\"id\"] = operation + \"_\" + getRandomString(5); //generates random id for the layer\n        newValue[\"name\"] =\n          operation + \"_\" + getRandomString(5);\n        newValue[\"color\"] = getRandomColor(); //generates random color\n      });\n      newValues = newValues.filter(value => value[\"features\"].length) //add layers that actually has features\n      setLayers((layers) => [...layers, ...newValues]);\n    };\n  };\n\n  // handelMetaChange takes in key-value pairs of metadata that needs to be changes in a lyers. \n  const handleMetaChange = (setLayers) => {\n    return (layerId, key, change) => {\n      !change && key === \"selected\"\n        ? setLayers((prevLayers) =>\n            prevLayers.map((layer) =>\n              layer.id === layerId\n                ? { ...layer, [key]: !layer.selected }\n                : layer\n            )\n          )\n        : setLayers((prevLayers) =>\n            prevLayers.map((layer) =>\n              layer.id === layerId ? { ...layer, [key]: change } : layer\n            )\n          );\n    };\n  };\n\n  // empty the state from all layers\n  const removeLayersFromState = (setLayers) => {\n    return () => {\n      setLayers([]);\n    };\n  };\n\n  // remove the layer from state that matches a given id\n  const removeLayerFromState = (setLayers, layers) => {\n    return (layerID) => {\n      var newLayers = layers.filter((layer) => {\n        return layer.id !== layerID;\n      });\n      setLayers(newLayers);\n    };\n  };\n\n  return (\n    <SnackbarProvider maxSnack={3}>\n      <div>\n        <Sidebar\n          addLayersToState={addLayersToState(setLayers)}\n          removeLayersFromState={removeLayersFromState(setLayers)}\n          removeLayerFromState={removeLayerFromState(setLayers, layers)}\n          layers={layers}\n          handleMetaChange={handleMetaChange(setLayers)}\n          setDraw={setDraw}\n        />\n        <Map\n          layers={layers}\n          addLayersToState={addLayersToState(setLayers)}\n          handleMetaChange={handleMetaChange(setLayers)}\n          draw={draw}\n        />\n        <Tutorial />\n      </div>\n    </SnackbarProvider>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('app'));"],"sourceRoot":""}