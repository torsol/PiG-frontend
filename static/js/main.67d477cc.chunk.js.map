{"version":3,"sources":["DropZone.js","LayerBar.js","utils/APIConnection.js","Sidebar.js","Map.js","App.js","utils/RandomColor.js","index.js"],"names":["baseStyle","flex","display","flexDirection","alignItems","padding","paddingLeft","paddingRight","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","outline","justifyContent","fontSize","activeStyle","acceptStyle","rejectStyle","Dropzone","addLayersToState","layers","onDrop","useCallback","acceptedFiles","promises","file","filePromise","Promise","resolve","fr","FileReader","readAsText","onload","JSON","parse","result","push","all","then","files","useDropzone","accept","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","style","useMemo","InputField","value","handleChange","type","onChange","Layer","layer","removeLayerFromState","handleMetaChange","useState","inputBox","setInputBox","name","layerName","setLayerName","key","id","className","selected","Fragment","ListItem","disableGutters","event","target","ClearOutlined","onClick","CheckOutlined","visibility","VisibilityOutlined","VisibilityOffOutlined","CreateOutlined","DeleteOutline","LayerBar","selectedLayersIndices","handleSelectedChange","map","HOST","concatGeoJSON","list","features","forEach","feature","calculateBuffer","inputData","requestData","axios","post","response","data","catch","error","calculateUnion","calculateIntersection","HeadLine","children","Operation","Sidebar","removeLayersFromState","selectedLayers","filter","List","disablePadding","DropZone","mapboxgl","accessToken","Map","setMap","mapContainer","useRef","addLayer","addSource","source","layout","paint","removeLayer","layerID","removeSource","getCurrentLayerIDs","getStyle","updateVisibility","getLayoutProperty","setLayoutProperty","useEffect","initial_map","container","current","center","zoom","draw","MapboxDraw","displayControlsDefault","controls","point","line_string","polygon","addControl","on","e","getAll","deleteAll","resize","f","queryRenderedFeatures","length","initializeMap","console","log","currentLayers","removable","indexOf","addable","handleLayerUpdate","ref","el","App","props","setLayers","newValues","operation","newValue","Math","random","toString","slice","i","floor","getRandomColor","layerId","change","prevLayers","newLayers","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.67d477cc.chunk.js","sourcesContent":["import React, { useCallback, useMemo } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport PublishIconLarge from \"@material-ui/icons/Publish\";\n\nconst baseStyle = {\n  flex: 1,\n  display: \"flex\",\n  flexDirection: \"row\",\n  alignItems: \"center\",\n  padding: \"20px\",\n  paddingLeft: \"20px\",\n  paddingRight: \"20px\",\n  borderWidth: 2,\n  borderRadius: 4,\n  borderColor: \"black\",\n  borderStyle: \"solid\",\n  backgroundColor: \"#e7e7e7\",\n  color: \"black\",\n  outline: \"none\",\n  justifyContent: \"space-around\",\n  //transition: \"border .24s ease-in-out\",\n  fontSize: \"18px\",\n};\n\nconst activeStyle = {\n  backgroundColor: \"#3a3a3a\",\n  color: \"white\",\n};\n\nconst acceptStyle = {\n  borderColor: \"white\",\n};\n\nconst rejectStyle = {\n  borderColor: \"white\",\n  borderStyle: \"solid\"\n};\n\nfunction Dropzone({ addLayersToState, layers }) {\n  const onDrop = useCallback(\n    (acceptedFiles) => {\n      let promises = [];\n      for (let file of acceptedFiles) {\n        let filePromise = new Promise((resolve) => {\n          let fr = new FileReader();\n          fr.readAsText(file);\n          fr.onload = () => resolve(JSON.parse(fr.result));\n        });\n        promises.push(filePromise);\n      }\n\n      Promise.all(promises).then((files) => {\n        addLayersToState(files, \"upload\");\n      });\n    },\n    //eslint-disable-next-line\n    [layers]\n  );\n\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject,\n  } = useDropzone({ accept: \".json\", onDrop });\n\n  const style = useMemo(\n    () => ({\n      ...baseStyle,\n      ...(isDragActive ? activeStyle : {}),\n      ...(isDragAccept ? acceptStyle : {}),\n      ...(isDragReject ? rejectStyle : {}),\n    }),\n    [isDragActive, isDragReject, isDragAccept]\n  );\n\n  return (\n    <div {...getRootProps({ style })}>\n      <input {...getInputProps()} />\n      Upload Layers\n      <PublishIconLarge />\n    </div>\n  );\n}\n\nexport default Dropzone;\n","import { ClearOutlined, CheckOutlined } from \"@material-ui/icons\";\nimport { ListItem } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport {\n  DeleteOutline,\n  CreateOutlined,\n  VisibilityOutlined,\n  VisibilityOffOutlined,\n} from \"@material-ui/icons\";\n\nconst InputField = ({value, handleChange}) => {\n  return <input type=\"text\" value={value} onChange={handleChange}></input>;\n};\n\nconst Layer = ({\n  layer,\n  removeLayerFromState,\n  handleMetaChange,\n}) => {\n  const [inputBox, setInputBox] = useState(false);\n  const [layerName, setLayerName] = useState(layer.name)\n\n  const handleNameChange = (event) => {\n    setLayerName(event.target.value)\n  }\n\n\n  return (\n    <div\n      key={layer.id}\n      className={\n        !layer.selected\n          ? \"layer-item\"\n          : \"layer-item-selected\"\n      }\n    >\n      {inputBox ? (\n        <React.Fragment>\n          <ListItem disableGutters>\n            <InputField value={layerName} handleChange={handleNameChange}/>\n          </ListItem>\n          <ClearOutlined\n            onClick={() => {\n              setLayerName(layer.name)\n              setInputBox(false);\n            }}\n          />\n          <CheckOutlined\n            onClick={() => {\n              setInputBox(false);\n              handleMetaChange(layer.id, \"name\", layerName)}\n            }\n          />\n        </React.Fragment>\n      ) : (\n        <React.Fragment>\n          <ListItem\n            disableGutters\n            onClick={() => {\n              handleMetaChange(layer.id, \"selected\", !layer.selected);\n            }}\n          >\n            {layer.name}\n          </ListItem>\n          {layer.visibility !== \"none\" ? (\n            <VisibilityOutlined\n              onClick={() => handleMetaChange(layer.id, \"visibility\", \"none\")}\n            />\n          ) : (\n            <VisibilityOffOutlined\n              onClick={() => handleMetaChange(layer.id, \"visibility\", \"visible\")}\n            ></VisibilityOffOutlined>\n          )}\n          <CreateOutlined onClick={() => setInputBox(true)} />\n          <DeleteOutline onClick={() => removeLayerFromState(layer.id)} />\n        </React.Fragment>\n      )}\n    </div>\n  );\n};\n\nconst LayerBar = ({\n  layers,\n  removeLayerFromState,\n  selectedLayersIndices,\n  handleSelectedChange,\n  handleMetaChange,\n}) => {\n  return (\n    <div>\n      {layers &&\n        layers.map((layer) => {\n          return (\n            <Layer\n              key={layer.id}\n              layer={layer}\n              removeLayerFromState={removeLayerFromState}\n              selectedLayersIndices={selectedLayersIndices}\n              handleSelectedChange={handleSelectedChange}\n              handleMetaChange={handleMetaChange}\n            />\n          );\n        })}\n    </div>\n  );\n};\n\nexport default LayerBar;\n","import axios from \"axios\";\n\n\n//const HOST = \"http://10.53.26.143:5000\"\nconst HOST = \"https://tba4251-api.herokuapp.com/\"\n\nfunction concatGeoJSON(list) {\n  // used to combine features into one geojson for backend processing\n  let features = [];\n\n  list.forEach((feature) => {\n    features = [...feature.features, ...features];\n  });\n\n  let newGeoJSON = {\n    type: \"FeatureCollection\",\n    features: features,\n  };\n\n  return newGeoJSON;\n}\n\nexport function calculateBuffer(addLayersToState, inputData) {\n  let requestData = concatGeoJSON(inputData);\n  requestData[\"value\"] = 10;\n\n  return function () {\n    axios\n      .post(HOST + \"/api/buffer\", requestData)\n      .then((response) => {\n        addLayersToState([response.data], \"buffer\");\n      })\n      .catch(function (error) {\n        // manipulate the error response here\n      });\n  };\n}\n\nexport function calculateUnion(addLayersToState, inputData) {\n  return function () {\n    let requestData = concatGeoJSON(inputData);\n    axios\n      .post(HOST + \"/api/union\", requestData)\n      .then((response) => {\n        addLayersToState([response.data], \"union\");\n      })\n      .catch(function (error) {\n        // manipulate the error response here\n      });\n  };\n}\n\nexport function calculateIntersection(addLayersToState, inputData) {\n  return function () {\n    let requestData = concatGeoJSON(inputData);\n    axios\n      .post(HOST + \"/api/intersection\", requestData)\n      .then((response) => {\n        addLayersToState([response.data], \"intersection\");\n      })\n      .catch(function (error) {\n        // manipulate the error response here\n      });\n  };\n}\n","import React from \"react\";\nimport DropZone from \"./DropZone\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport LayerBar from \"./LayerBar\";\nimport LayersIcon from \"@material-ui/icons/Layers\";\nimport FunctionsIcon from \"@material-ui/icons/Functions\";\nimport ArrowForward from \"@material-ui/icons/ArrowForwardIosOutlined\";\nimport ClearOutlinedIcon from \"@material-ui/icons/ClearOutlined\";\n\nimport {\n  calculateBuffer,\n  calculateUnion,\n  calculateIntersection,\n} from \"./utils/APIConnection\";\n\nexport const HeadLine = ({ children }) => {\n  return <div className=\"headLine\">{children}</div>;\n};\n\nexport const Operation = ({ children }) => {\n  return <div className=\"operation\">{children}</div>;\n};\n\nconst Sidebar = ({\n  addLayersToState,\n  removeLayersFromState,\n  removeLayerFromState,\n  layers,\n  handleMetaChange,\n}) => {\n\n  var selectedLayers = layers.filter(\n    (layer) => layer.selected\n  );\n  return (\n    <div className=\"sidebar\">\n      <List disablePadding>\n        <HeadLine>\n          <ListItem disableGutters>Operations</ListItem>\n          <FunctionsIcon />\n        </HeadLine>\n\n        <Operation>\n          <ListItem\n            disableGutters\n            onClick={calculateBuffer(addLayersToState, selectedLayers)}\n          >\n            Buffer\n          </ListItem>\n          <ArrowForward />\n        </Operation>\n        <Operation>\n          <ListItem\n            disableGutters\n            onClick={calculateUnion(addLayersToState, selectedLayers)}\n          >\n            Union\n          </ListItem>\n          <ArrowForward />\n        </Operation>\n        <Operation>\n          <ListItem\n            disableGutters\n            onClick={calculateIntersection(addLayersToState, selectedLayers)}\n          >\n            Intersection\n          </ListItem>\n          <ArrowForward />\n        </Operation>\n        <Operation>\n          <ListItem disableGutters onClick={removeLayersFromState}>\n            Remove All Layers\n          </ListItem>\n          <ClearOutlinedIcon />\n        </Operation>\n        <ListItem disableGutters>\n          <DropZone\n            accept=\"*.json\"\n            addLayersToState={addLayersToState}\n            layers={layers}\n          />\n        </ListItem>\n        <HeadLine>\n          <ListItem disableGutters>Layers</ListItem>\n          <LayersIcon />\n        </HeadLine>\n        <LayerBar\n          layers={layers}\n          removeLayerFromState={removeLayerFromState}\n          handleMetaChange={handleMetaChange}\n        />\n      </List>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport MapboxDraw from \"@mapbox/mapbox-gl-draw\";\nimport \"@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css\";\n\nmapboxgl.accessToken =\n  \"pk.eyJ1IjoidG9yc3RlaW4iLCJhIjoiY2s3YWJkdzk3MDU1bjNncnd0dWExN292YiJ9.te0K0gwI11dUd2qZs6FQ0g\";\n\nconst Map = ({ layers, handleSelectedChange, addLayersToState, handleMetaChange }) => {\n  // react hooks for storing the map\n  const [map, setMap] = useState(null);\n  const mapContainer = useRef(null);\n\n  // initial coordinates for Trondheim\n  const lng = 10.38;\n  const lat = 63.43;\n  const zoom = 13;\n\n  const initializeMap = (setMap, mapContainer) => {\n    const initial_map = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: \"mapbox://styles/mapbox/streets-v11\", // stylesheet location\n      center: [lng, lat],\n      zoom: zoom,\n    });\n\n    var draw = new MapboxDraw({\n      displayControlsDefault: false,\n      controls: {\n        point: true,\n        line_string: true,\n        polygon: true\n      },\n    });\n\n    initial_map.addControl(draw, \"top-right\");\n\n    initial_map.on(\"draw.create\", onCreation);\n    //initial_map.on(\"draw.delete\", updateArea);\n    //initial_map.on(\"draw.update\", updateArea);\n\n    function onCreation(e) {\n      var data = draw.getAll();\n      addLayersToState([data], 'drawTool');\n      draw.deleteAll();\n    }\n\n    initial_map.on(\"load\", () => {\n      setMap(initial_map);\n\n      initial_map.resize();\n    });\n\n    initial_map.on(\"click\", (e) => {\n      let f = initial_map.queryRenderedFeatures(e.point, {\n        layers: getCurrentLayerIDs(initial_map),\n      });\n      if (f.length) {\n        // if you have clicked a number of layers\n        handleMetaChange(f.map((feature) => feature.layer.id)[0], \"selected\");\n      }\n    });\n  };\n\n  const addLayer = (layers) => {\n    layers.forEach((layer) => {\n      map.addSource(layer.id, {\n        type: \"geojson\",\n        data: layer,\n      });\n      map.addLayer({\n        id: layer.id,\n        type: \"fill\",\n        source: layer.id,\n        layout: {\n          'visibility': 'visible',\n        },\n        paint: {\n          \"fill-color\": layer.color,\n          \"fill-opacity\": 0.7,\n        },\n      });\n    });\n  };\n\n  const removeLayer = (layers) => {\n    layers.forEach((layerID) => {\n      map.removeLayer(layerID);\n      map.removeSource(layerID);\n    });\n  };\n\n  const getCurrentLayerIDs = (map) => {\n    return map\n      .getStyle()\n      .layers.filter((layer) => {\n        return (\n          layer.source !== \"composite\" &&\n          layer.type !== \"background\" &&\n          layer.source !== \"mapbox-gl-draw-cold\" &&\n          layer.source !== \"mapbox-gl-draw-hot\"\n        );\n      })\n      .map((layer) => layer.id);\n  };\n\n  const updateVisibility = (layers) => {\n    layers.forEach(layer => {\n      var visibility = map.getLayoutProperty(layer.id, 'visibility');\n      if (visibility !== layer.visibility) map.setLayoutProperty(layer.id, 'visibility', layer.visibility)\n    })\n  }\n\n  const handleLayerUpdate = (layers, map) => {\n    const currentLayers = getCurrentLayerIDs(map);\n\n    const removable = currentLayers.filter(function (layer) {\n      //get the index for layers that have been deleted in the state\n      return layers.map((layer) => layer.id).indexOf(layer) === -1;\n    });\n\n    const addable = layers.filter(function (layer) {\n      //get the index for layers that have been added to the state\n      return currentLayers.indexOf(layer.id) === -1;\n    });\n\n    if (addable[0]) addLayer(addable);\n    if (removable[0]) removeLayer(removable);\n\n    updateVisibility(layers)\n  };\n\n  // render map on initial load\n  useEffect(() => {\n    if (!map) initializeMap(setMap, mapContainer);\n    // eslint-disable-next-line\n  }, [map]);\n\n  useEffect(() => {\n    console.log(\"Map\", \"Layers handled\");\n    // eslint-disable-next-line\n    if (map) handleLayerUpdate(layers, map);\n    // eslint-disable-next-line\n  }, [layers]);\n\n  return (\n    <div ref={(el) => (mapContainer.current = el)} className=\"mapContainer\" />\n  );\n};\n\nexport default Map;\n","import React, { useState } from \"react\";\nimport Sidebar from \"./Sidebar\";\nimport Map from \"./Map\";\nimport { getRandomColor } from \"./utils/RandomColor\";\n\nconst App = (props) => {\n  const [layers, setLayers] = useState([]);\n\n  const addLayersToState = (setLayers) => {\n    return (newValues, operation) => {\n      newValues.forEach((newValue) => {\n        newValue[\"id\"] = operation + \"_\" + Math.random().toString(36).slice(2); //generates random name for the layer\n        newValue[\"name\"] =\n          operation + \"_\" + Math.random().toString(36).slice(2);\n        newValue[\"color\"] = getRandomColor(); //generates random color\n      });\n      setLayers((layers) => [...layers, ...newValues]);\n    };\n  };\n\n  const handleMetaChange = (setLayers) => {\n    return (layerId, key, change) => {\n      !change && key === \"selected\"\n        ? setLayers((prevLayers) =>\n            prevLayers.map((layer) =>\n              layer.id === layerId\n                ? { ...layer, [key]: !layer.selected }\n                : layer\n            )\n          )\n        : setLayers((prevLayers) =>\n            prevLayers.map((layer) =>\n              layer.id === layerId ? { ...layer, [key]: change } : layer\n            )\n          );\n    };\n  };\n\n  const removeLayersFromState = (setLayers) => {\n    return () => {\n      setLayers([]);\n    };\n  };\n\n  const removeLayerFromState = (setLayers, layers) => {\n    return (layerID) => {\n      var newLayers = layers.filter((layer) => {\n        return layer.id !== layerID;\n      });\n      setLayers(newLayers);\n    };\n  };\n\n  return (\n    <div>\n      <Sidebar\n        addLayersToState={addLayersToState(setLayers)}\n        removeLayersFromState={removeLayersFromState(setLayers)}\n        removeLayerFromState={removeLayerFromState(setLayers, layers)}\n        layers={layers}\n        handleMetaChange={handleMetaChange(setLayers)}\n      />\n      <Map\n        layers={layers}\n        addLayersToState={addLayersToState(setLayers)}\n        handleMetaChange={handleMetaChange(setLayers)}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","export function getRandomColor() {\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('app'));"],"sourceRoot":""}